name: Build & Deploy (ECR + ECS Fargate via CDK Python)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPO: hello-world-go
  IMAGE_TAG: latest
  CDK_VERSION: 2.151.0
  PYTHON_VERSION: "3.11"

jobs:
  cdk-deploy-infra:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK and deps
        run: |
          npm i -g aws-cdk@${{ env.CDK_VERSION }}
          python -m pip install --upgrade pip
          pip install -r infra/requirements.txt

      - name: CDK Bootstrap (first time per acct/region)
        run: |
          export CDK_DEFAULT_ACCOUNT=${{ secrets.AWS_ACCOUNT_ID }}
          export CDK_DEFAULT_REGION=${{ env.AWS_REGION }}
          cdk bootstrap aws://$CDK_DEFAULT_ACCOUNT/$CDK_DEFAULT_REGION

      - name: CDK Deploy
        working-directory: infra
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: cdk deploy --require-approval never

  build-and-push:
    runs-on: ubuntu-latest
    needs: cdk-deploy-infra
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        working-directory: app
        run: |
          IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

  force-new-deployment:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force ECS service deployment
        run: |
          STACK=HelloWorldFargateStack
          CLUSTER=$(aws cloudformation describe-stacks --stack-name $STACK \
                   --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" --output text)
          SERVICE=$(aws cloudformation describe-stacks --stack-name $STACK \
                   --query "Stacks[0].Outputs[?OutputKey=='ServiceName'].OutputValue" --output text)
          aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment
